Steps to "Poolify" EcalPedestals (O2O procedure)
===================================================

0) Clear the database if needed

 > sqlplus cms_ecal_dev/ecaldev05@devdb < clear.sql

1) Use buildmapping "dry run" mode to create a mapping file template
   for the desired class

 > pool_build_object_relational_mapping -f mapping-template.xml \
   -o EcalPedestals-default.xml -b -d CondFormatsEcalObjects \
   -c oracle://devdb -u cms_ecal_dev -p ecaldev05 -b

 > cp EcalPedestals-default.xml EcalPedestals-custom.xml

Modify EcalPedestals-custom.xml
   --change to different Mapping version(!)
   --change column names and table names as you wish

2) Create offline db schema and some mock data population 

 > sqlplus cms_ecal_dev/ecaldev05@devdb < offline-ecalpedestals-oracle.sql

3) Build the real mapping 

 > pool_build_object_relational_mapping -f EcalPedestals-custom.xml \
   -d CondFormatsEcalObjects -c oracle://devdb -u cms_ecal_dev -p ecaldev05

--inspect the database to see some POOL tables appeared look at
--Ecaldbsetup.xml 

4) Build the pool container with data

 > pool_setup_database -f Ecaldbsetup.xml -d CondFormatsEcalObjects -c oracle://devdb \
   -u cms_ecal_dev -p ecaldev05

5) Register the db host to the POOL catalog. Necessary *only* if the
   connection string hasn't been already registered to the catalog.

 > FCregisterPFN -p oracle://devdb -t POOL_RDBMS

5.1)  To write the file catalog to the DB, do:

 > FCpublish -u file:POOLFilecatalog.xml -d oracle://devdb/cms_ecal_dev

6) In the offline db, build initial iov of the EcalPedestals data from
   the TIME value in the top level EcalPedestals object table. The
   command returns the result token of the IOV has been built. -s option
   takes the classid of of the EcalPedestals object in the dictionary:
   i.e. from EcalObjects/src/classes_def.xml

 > setenv POOL_AUTH_USER cms_ecal_dev //*only* if use oracle
 > setenv POOL_AUTH_PASSWORD ecaldev05 //*only* if use oracle

 > cmscond_build_iov -h //to see the help message
 > cmscond_build_iov -c oracle://devdb -t ECALPEDESTALS \
   -n EcalPedestals -s 2F16F0A9-79D5-4881-CE0B-C271DD84A7F1

7) Assign a tag to the iov token built by the previous command and
   register it to the metadata service

 > cmscond_build_metadata -h //to see the help message
 > cmscond_build_metadata -c oracle://devdb \
   -i "<the output from the previous command>" \
   -t "ecalped_fromonline"

8) Get transfered data in offline db from eventsetup. Inspect the
   content of load_onlineped.txt, see data changes when iov expires.

 > cmsRun --parameter-set load_onlineped.cfg
 > cmsRun --parameter-set print_onlineped.cfg

--success!
--If more data is written, repeat steps 4, 6, and 7
